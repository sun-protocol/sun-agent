[dependency-groups]
dev = [
    "pyright==1.1.389",
    "mypy==1.13.0",
    "ruff==0.4.8",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "typer",
    "rich",
    "polars",
    "pytest_mock",
    "poethepoet",
    "packaging",
    "grpcio-tools~=1.70.0",
    "mypy-protobuf",
    "cookiecutter",
    "poethepoet",
    "tomli",
    "tomli-w",
    "chainlit",
    "streamlit",
]

[tool.uv]
override-dependencies = [
    "tenacity>=9.0.0",
    "aiofiles>=24.1.0",
    "chainlit>=2.0.1",
    "httpx>=0.27.0",
]
[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
sunagent-ext = { workspace = true }

[tool.ruff]
line-length = 120
fix = true

target-version = "py310"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["E", "F", "W", "B", "Q", "I", "ASYNC", "T20"]
ignore = ["F401", "E501", "B008"]

[tool.ruff.lint.flake8-tidy-imports]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"unittest".msg = "Use `pytest` instead."

[tool.mypy]
strict = true
exclude = ["/Users/bobo/code/SunAgent/packages/sunagent-ws/src/"]
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true

[tool.pyright]
include = ["src", "tests", "samples"]
exclude = ["samples/core_xlang_hello_python_agent/protos"]
typeCheckingMode = "strict"
reportUnnecessaryIsInstance = false
reportMissingTypeStubs = false

[tool.poe.tasks]
fmt = "python run_task_in_pkgs_if_exist.py fmt"
format.ref = "fmt"
lint = "python run_task_in_pkgs_if_exist.py lint"
pyright = "python run_task_in_pkgs_if_exist.py pyright"
mypy = "python run_task_in_pkgs_if_exist.py mypy"
test = "python run_task_in_pkgs_if_exist.py test"
markdown-code-lint = """python check_md_code_blocks.py ../README.md ./packages/sunagent-core/docs/src/**/*.md ./packages/sunagent-magentic-one/README.md"""
samples-code-check = """pyright ./samples"""

check = ["fmt", "lint", "pyright", "test"]

gen-proto = [
    { cmd = "python -m grpc_tools.protoc --python_out=./packages/sunagent-ext/src/sunagent_ext/runtimes/grpc/protos --grpc_python_out=./packages/sunagent-ext/src/sunagent_ext/runtimes/grpc/protos --mypy_out=./packages/sunagent-ext/src/sunagent_ext/runtimes/grpc/protos --mypy_grpc_out=./packages/sunagent-ext/src/sunagent_ext/runtimes/grpc/protos --proto_path ./protos/ agent_worker.proto --proto_path ./protos/ cloudevent.proto" },
    { script = "fixup_generated_files:main" }
]


gen-proto-samples = "python -m grpc_tools.protoc --python_out=./samples/core_xlang_hello_python_agent/protos --grpc_python_out=./samples/core_xlang_hello_python_agent/protos --mypy_out=./samples/core_xlang_hello_python_agent/protos --mypy_grpc_out=./samples/core_xlang_hello_python_agent/protos --proto_path ../dotnet/src/Microsoft.sunagent/Agents/protos/ agent_events.proto"

[[tool.poe.tasks.gen-test-proto.sequence]]
cmd = "python -m grpc_tools.protoc --python_out=./packages/sunagent-core/tests/protos --grpc_python_out=./packages/sunagent-core/tests/protos --mypy_out=./packages/sunagent-core/tests/protos --mypy_grpc_out=./packages/sunagent-core/tests/protos --proto_path ./packages/sunagent-core/tests/protos serialization_test.proto"

[[tool.poe.tasks.gen-test-proto.sequence]]
cmd = "python -m grpc_tools.protoc --python_out=./packages/sunagent-ext/tests/protos --grpc_python_out=./packages/sunagent-ext/tests/protos --mypy_out=./packages/sunagent-ext/tests/protos --mypy_grpc_out=./packages/sunagent-ext/tests/protos --proto_path ./packages/sunagent-core/tests/protos serialization_test.proto"

[tool.pytest.ini_options]
markers = [
    "grpc: tests invoking gRPC functionality",
]